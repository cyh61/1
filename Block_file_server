#!/usr/bin/env python
# -*- coding: utf-8 -*-
import socket 
import socket
import threading
import time
import sys
import os
import struct 
if "__main__" == __name__:   
  try:  
  
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM);  #定义socket类型，网络通信，TCP
                                                                   #socket.SOCK_STREAM，流式socket , for TCP 
        sock.bind(('192.168.132.9', 6666));   #将套接字与指定的ip和端口相连  
        sock.listen(5);     #启动监听，并将最大连接数设为5   
 
  except:   #try中异常的时候执行except
        print("init socket err!");  
  
  while True:  
        print("Waiting connection...");
        conn, addr = sock.accept(); ## 开始被动接受TCP客户端的连接。并返回新的套接字与IP地址
        print("Accept new connection from");  
        print(addr);  
        while 1:           
	   conn.settimeout(500) #设置超时期
           fileinfo_size = struct.calcsize('128sl') #定义文件信息，文件名为128bytes长度
           buf = conn.recv(fileinfo_size)#接受TCP套接字的数据。数据以字符串形式返回，fileinfo_size为指定要接收的最大数据量为文件大小
           if buf:
               filename, filesize = struct.unpack('128sl', buf)  #解包buf得到文件名和文件大小
               fn = filename.strip('\00')   #strip删除打包时候的多余空字符
               new_filename = os.path.join('./', 'new_' + fn) #重新处理文件名new_filename
	       #延时处理，模拟阻塞
	       time.sleep(4)
	       print 'start receiving...'
	       #输出新的文件名和文件大小
               print 'file new name is {0}, filesize is {1}'.format(new_filename,
                                                            filesize)  	       
	       #初始化文件大小0
               recvd_size = 0  
	       #读写打开文件
               fp = open(new_filename, 'wb')            
               while not recvd_size == filesize:
		   #实际文件大小大于1k,继续读取 1024 个字节（即 1 KB）的内容,新读取的字符长度加到新建文件长度
                   if filesize - recvd_size > 1024:
                       data = conn.recv(1024)
                       recvd_size += len(data)
		   #实际文件多余1K小于2K的部分，继续读取filesize - recvd_size的大小
                   else:
                       data = conn.recv(filesize - recvd_size)
                       recvd_size = filesize
                   fp.write(data)
               fp.close()
	       conn.send('end receive...');
	       print 'end receive...'
           else : 
               conn.send('exit');
	       break
        conn.close();	
	print("end of sevice!")
